# kubectl proxy
kubectl proxy --reject-paths="^/api/v1/replicationcontrollers" --port=8001 --v=2
curl 127.0.0.1:8001/api/v1/pods
curl 127.0.0.1:8001/api/v1/replicationcontrollers # 会被拒绝

# kubernetes service
kubectl get svc
curl -k --resolve kubernetes:443:10.254.0.1 https://kubernetes/api

# API 版本
curl 127.0.0.1:8001/api/

# 支持的资源对象类型
curl 127.0.0.1:8001/api/v1

# Proxy API -- 将 REST 请求转发到 Work Node 上，注意后面要跟 /
curl 127.0.0.1:8080/api/v1/proxy/nodes/127.0.0.1/pods/
curl 127.0.0.1:8080/api/v1/proxy/nodes/127.0.0.1/stats/
curl 127.0.0.1:8080/api/v1/proxy/nodes/127.0.0.1/spec/

# Proxy API
# 访问 Pod 的服务接口
kubectl create -f chapter2/static-web.yaml
curl 127.0.0.1:8080/api/v1/proxy/namespaces/default/pods/static-web/

# cAdvisor 作为 kubelet 的一部分功能，可以通过端口映射到宿主机，再在宿主机上的浏览器访问
curl -L http://127.0.0.1:4194

# Service Account
sudo openssl genrsa -out /etc/kubernetes/ca.key 4096
sudo openssl req -x509 -new -nodes -key /etc/kubernetes/ca.key -subj "/CN=yourcompany.com" -days 36500 -out /etc/kubernetes/ca.crt
sudo cp -an /etc/kubernetes/controller-manager /etc/kubernetes/controller-manager.cyp
sudo sed -ri 's|^KUBE_CONTROLLER_MANAGER_ARGS="([^"]*)"|KUBE_CONTROLLER_MANAGER_ARGS="\1 --root-ca-file=/etc/kubernetes/ca.crt"|' /etc/kubernetes/controller-manager
sudo systemctl restart kube-controller-manager
# 启动 Pod，查看 Pod 容器中的文件
kubectl run -i -t centos --image=centos --restart=Never
cat /run/secrets/kubernetes.io/serviceaccount/token   # 使用 kube-controller-manager 参数 --service-account-private-key-file=/etc/kubernetes/serviceaccount.key 签名
cat /run/secrets/kubernetes.io/serviceaccount/ca.crt  # 来自 kube-controller-manager 参数 --root-ca-file=/etc/kubernetes/ca.crt
# 这里不能使用 curl --cacert /run/secrets/kubernetes.io/serviceaccount/ca.crt https://kubernetes/api，因为 kube-apiserver 的证书不是用 /etc/kubernetes/ca.crt 签名
curl -k https://kubernetes/api

# Secret
kubectl create -f secret.yaml
kubectl create -f use-secret-pod.yaml
kubectl exec use-secret ls /etc/foo/
kubectl exec use-secret cat /etc/foo/username

