
# 自定义列名进行输出
kubectl get pod -o='custom-columns=Pod:.metadata.name,Images:.spec.containers[*].image'

# 根据目录下所有.yaml、.yml、.json文件的定义进行创建操作：
kubectl create -f .

# 静态 Pod
mkdir -p /etc/kubelet.d/
sed -ri 's|^KUBELET_ARGS="([^"]*)"|KUBELET_ARGS="\1 --config=/etc/kubelet.d/"|' /etc/kubernetes/kubelet
systemctl restart kubelet
cp static-web.yaml /etc/kubelet.d/
kubectl get pod

# 创建 ConfigMap
kubectl create -f configmap.yaml
kubectl create configmap configmap-1 --from-file=configmap.yaml
kubectl create configmap configmap-2 --from-literal="key2=value2"
# 在容器中使用：1.环境变量方式;2.volume 挂载方式
kubectl create -f configmap.yaml -f configmap-pod.yaml
kubectl get pod --show-all
kubectl logs configmap-pod -c configmap-env
kubectl logs configmap-pod -c configmap-mount -f
# 更新 ConfigMap
kubectl replace -f configmap.yaml
# 在容器中不是即刻生效？
kubectl logs configmap-pod -c configmap-mount -f

# Restart Policy
kubectl create -f restartpolicy-pod.yaml
kubectl logs restartpolicy -c running # 重启策略不会影响正在运行的容器
kubectl logs restartpolicy -c exit0
kubectl logs restartpolicy -c exit255

# DaemonSet
kubectl create -f daemonset.yaml
kubectl --namespace=kube-system get daemonset

# rolling-update
kubectl create -f redis-master-rc.yaml
kubectl get rc -o wide
kubectl rolling-update redis-master -f redis-master-rc-v2.yaml
kubectl get rc -o wide
# 指定新镜像滚动升级，会给 RC 增加一个 key 为 “deployment” 的 Label
kubectl rolling-update redis-master-v2 --image=kubeguide/redis-master:1.0
kubectl get rc -o wide
# 回滚
kubectl rolling-update redis-master-v2 --image=kubeguide/redis-master:notfound
kubectl rolling-update redis-master-v2 --rollback

# 使用 expose 创建服务
kubectl create -f webapp-rc.yaml
kubectl get rc -o wide
kubectl get pod -o wide
kubectl expose rc webapp
kubectl get svc -o wide
curl 10.254.143.245:8080

